name: Sync branch to template

on:
  workflow_dispatch:
    inputs:
      additional_files:
        description: 'Comma-separated list of extra paths to sync, for example: .eslintrc,.prettierrc,.github'
        required: false
  schedule:
    - cron: '14 0 1 * *'

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Check if repository is ts-template
        run: |
          if [[ "${{ github.repository }}" == "ubiquity/ts-template" ]]; then
            echo "Skipping sync: this is the template repository."
            exit 0
          fi

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get GitHub App token
        uses: tibdex/github-app-token@v1.7.0
        id: get_installation_token
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}
          
      - name: Sync branch to template
        env:
          GH_TOKEN: ${{ steps.get_installation_token.outputs.token }}
          WHITELIST_FILES: ".github/ .husky/ .eslintrc .nvmrc .prettierrc .yarnrc.yml tsconfig.json"
          ADDITIONAL_FILES: ${{ github.event.inputs.additional_files }}
          BLACKLIST_FILES: ".github/workflows/deploy.yml"
        run: |
          branch_name=$(git rev-parse --abbrev-ref HEAD)
          original_remote=$(git remote get-url origin)
          pr_branch="sync-template/${branch_name}"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          # Check if the sync branch already exists
          if git ls-remote --exit-code --heads origin "$pr_branch"; then
            echo "Branch $pr_branch already exists. Fetching and updating."
            git fetch origin "$pr_branch"
            git checkout "$pr_branch"
            git rebase "origin/$pr_branch"
          else
            echo "Creating new branch $pr_branch."
            git checkout -b "$pr_branch"
          fi

          git clone https://github.com/ubiquity/ts-template template-repo

          # Convert ADDITIONAL_FILES inputs to array
          additional_files=()
          if [[ -n "$ADDITIONAL_FILES" ]]; then
            IFS=',' read -r -a additional_files <<< "$ADDITIONAL_FILES"
          fi

          # Convert BLACKLIST_FILES to array
          blacklist_files=()
          if [[ -n "$BLACKLIST_FILES" ]]; then
            IFS=',' read -r -a blacklist_files <<< "$BLACKLIST_FILES"
          fi

          # Prepare file list for the PR body and process each whitelist file
          file_list=""
          for file in $WHITELIST_FILES "${additional_files[@]}"; do
            if [[ -e "template-repo/$file" ]]; then
              # Skip file if they match the blacklist
              if [[ ! " ${blacklist_files[@]} " =~ " ${file} " ]]; then
                cp -rf "template-repo/$file" "$file"
                file_list+="\n- \`${file}\`"
              else
                echo "Skipping blacklisted file: $file"
              fi
            else
              # Remove file from destination if not in template
              rm -rf "$file"
              file_list+="\n- \`${file}\` (removed)"
            fi
          done

          # Clean up
          rm -rf template-repo/

          # Commit
          git add .
          git commit -m "chore: sync template"
          
          # Push
          git push "$original_remote" "$pr_branch"

          # Create PR
          gh pr create --title "Sync branch to template" --body "This pull request merges changes from the template repository, overwriting or removing the following files:${file_list}" --head "$pr_branch" --base "$branch_name"
